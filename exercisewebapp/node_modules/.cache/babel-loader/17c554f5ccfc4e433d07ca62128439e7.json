{"ast":null,"code":"// TODO: Get Client ID from https://developer.fy.com/dashboard/ and put it here\nconst clientId = 'af4094bc06e540edbc82403be27a055c';\nconst redirectUri = 'http://localhost:3000/';\nconst fyUrl = `https://accounts.fy.com/authorize?response_type=token&scope=playlist-modify-public&client_id=${clientId}&redirect_uri=${redirectUri}`;\nlet accessToken = undefined;\nlet expiresIn = undefined;\nconst fy = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (urlAccessToken && urlExpiresIn) {\n      accessToken = urlAccessToken[1];\n      expiresIn = urlExpiresIn[1];\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n    } else {\n      window.location = fyUrl;\n    }\n  },\n\n  async search(term) {\n    const searchUrl = `https://api.fy.com/v1/search?type=track&q=${term.replace(' ', '%20')}`;\n    return fetch(searchUrl, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (!jsonResponse.tracks) return [];\n      return jsonResponse.tracks.items.map(track => {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    });\n  },\n\n  async savePlaylist(name, trackIds) {\n    if (Array.isArray(trackIds) && trackIds.length) {\n      const createPlaylistUrl = `https://api.fy.com/v1/me/playlists`;\n      const response = await fetch(createPlaylistUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${accessToken}`\n        },\n        body: JSON.stringify({\n          name: name,\n          public: true\n        })\n      });\n      const jsonResponse = await response.json();\n      const playlistId = jsonResponse.id;\n\n      if (playlistId) {\n        const replacePlaylistTracksUrl = `https://api.fy.com/v1/playlists/${playlistId}/tracks`;\n        await fetch(replacePlaylistTracksUrl, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${accessToken}`\n          },\n          body: JSON.stringify({\n            uris: trackIds.map(id => 'fy:track:'.concat(id))\n          })\n        });\n      }\n    }\n  }\n\n};\nexport default fy;","map":{"version":3,"sources":["C:/Users/user/desktop/wannee.github.io/jsd-jamming-assessment/src/utils/Spotify.js"],"names":["clientId","redirectUri","fyUrl","accessToken","undefined","expiresIn","fy","getAccessToken","urlAccessToken","window","location","href","match","urlExpiresIn","setTimeout","history","pushState","search","term","searchUrl","replace","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackIds","Array","isArray","length","createPlaylistUrl","method","body","JSON","stringify","public","playlistId","replacePlaylistTracksUrl","uris","concat"],"mappings":"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","sourcesContent":["// TODO: Get Client ID from https://developer.fy.com/dashboard/ and put it here\r\nconst clientId = 'af4094bc06e540edbc82403be27a055c';\r\n\r\nconst redirectUri = 'http://localhost:3000/';\r\nconst fyUrl = `https://accounts.fy.com/authorize?response_type=token&scope=playlist-modify-public&client_id=${clientId}&redirect_uri=${redirectUri}`;\r\nlet accessToken = undefined;\r\nlet expiresIn = undefined;\r\n\r\nconst fy = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n        const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\r\n        const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\r\n        if (urlAccessToken && urlExpiresIn) {\r\n            accessToken = urlAccessToken[1];\r\n            expiresIn = urlExpiresIn[1];\r\n            window.setTimeout(() => (accessToken = ''), expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n        } else {\r\n            window.location = fyUrl;\r\n        }\r\n    },\r\n\r\n    async search(term) {\r\n        const searchUrl = `https://api.fy.com/v1/search?type=track&q=${term.replace(' ', '%20')}`;\r\n        return fetch(searchUrl, {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`,\r\n                },\r\n            })\r\n            .then((response) => response.json())\r\n            .then((jsonResponse) => {\r\n                if (!jsonResponse.tracks) return [];\r\n                return jsonResponse.tracks.items.map((track) => {\r\n                    return {\r\n                        id: track.id,\r\n                        name: track.name,\r\n                        artist: track.artists[0].name,\r\n                        album: track.album.name,\r\n                        uri: track.uri,\r\n                    };\r\n                });\r\n            });\r\n    },\r\n\r\n    async savePlaylist(name, trackIds) {\r\n        if (Array.isArray(trackIds) && trackIds.length) {\r\n            const createPlaylistUrl = `https://api.fy.com/v1/me/playlists`;\r\n            const response = await fetch(createPlaylistUrl, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${accessToken}`,\r\n                },\r\n                body: JSON.stringify({\r\n                    name: name,\r\n                    public: true,\r\n                }),\r\n            });\r\n            const jsonResponse = await response.json();\r\n            const playlistId = jsonResponse.id;\r\n            if (playlistId) {\r\n                const replacePlaylistTracksUrl = `https://api.fy.com/v1/playlists/${playlistId}/tracks`;\r\n                await fetch(replacePlaylistTracksUrl, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${accessToken}`,\r\n                    },\r\n                    body: JSON.stringify({\r\n                        uris: trackIds.map((id) => 'fy:track:'.concat(id)),\r\n                    }),\r\n                });\r\n            }\r\n        }\r\n    },\r\n};\r\n\r\nexport default fy;"]},"metadata":{},"sourceType":"module"}