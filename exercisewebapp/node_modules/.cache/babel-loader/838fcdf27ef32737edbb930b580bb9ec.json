{"ast":null,"code":"// TODO: Get Client ID from https://developer.fy.com/dashboard/ and put it here\nconst clientId = \"af4094bc06e540edbc82403be27a055c\";\nconst redirectUri = \"http://localhost:3000/\";\nconst fyUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\nlet accessToken = undefined;\nlet expiresIn = undefined;\nconst fy = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (urlAccessToken && urlExpiresIn) {\n      accessToken = urlAccessToken[1];\n      expiresIn = urlExpiresIn[1];\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n    } else {\n      window.location = fyUrl;\n    }\n  },\n\n  async search(term) {\n    const searchUrl = `https://api.fy.com/v1/search?type=track&q=${term.replace(\" \", \"%20\")}`;\n    return fetch(searchUrl, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (!jsonResponse.tracks) return [];\n      return jsonResponse.tracks.items.map(track => {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    });\n  },\n\n  async savePlaylist(name, trackIds) {\n    if (Array.isArray(trackIds) && trackIds.length) {\n      const createPlaylistUrl = `https://api.fy.com/v1/me/playlists`;\n      const response = await fetch(createPlaylistUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${accessToken}`\n        },\n        body: JSON.stringify({\n          name: name,\n          public: true\n        })\n      });\n      const jsonResponse = await response.json();\n      const playlistId = jsonResponse.id;\n\n      if (playlistId) {\n        const replacePlaylistTracksUrl = `https://api.fy.com/v1/playlists/${playlistId}/tracks`;\n        await fetch(replacePlaylistTracksUrl, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${accessToken}`\n          },\n          body: JSON.stringify({\n            uris: trackIds.map(id => \"fy:track:\".concat(id))\n          })\n        });\n      }\n    }\n  }\n\n};\nexport default fy;","map":{"version":3,"sources":["C:/Users/user/Desktop/wannee19.github.io/jsd-jamming-assessment/src/utils/Spotify.js"],"names":["clientId","redirectUri","fyUrl","accessToken","undefined","expiresIn","fy","getAccessToken","urlAccessToken","window","location","href","match","urlExpiresIn","setTimeout","history","pushState","search","term","searchUrl","replace","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackIds","Array","isArray","length","createPlaylistUrl","method","body","JSON","stringify","public","playlistId","replacePlaylistTracksUrl","uris","concat"],"mappings":"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","sourcesContent":["// TODO: Get Client ID from https://developer.fy.com/dashboard/ and put it here\r\nconst clientId = \"af4094bc06e540edbc82403be27a055c\";\r\n\r\nconst redirectUri = \"http://localhost:3000/\";\r\nconst fyUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\nlet accessToken = undefined;\r\nlet expiresIn = undefined;\r\n\r\nconst fy = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\r\n    const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (urlAccessToken && urlExpiresIn) {\r\n      accessToken = urlAccessToken[1];\r\n      expiresIn = urlExpiresIn[1];\r\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n      window.history.pushState(\"Access Token\", null, \"/\");\r\n    } else {\r\n      window.location = fyUrl;\r\n    }\r\n  },\r\n\r\n  async search(term) {\r\n    const searchUrl = `https://api.fy.com/v1/search?type=track&q=${term.replace(\r\n      \" \",\r\n      \"%20\"\r\n    )}`;\r\n    return fetch(searchUrl, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse.tracks) return [];\r\n        return jsonResponse.tracks.items.map((track) => {\r\n          return {\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri,\r\n          };\r\n        });\r\n      });\r\n  },\r\n\r\n  async savePlaylist(name, trackIds) {\r\n    if (Array.isArray(trackIds) && trackIds.length) {\r\n      const createPlaylistUrl = `https://api.fy.com/v1/me/playlists`;\r\n      const response = await fetch(createPlaylistUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n        body: JSON.stringify({\r\n          name: name,\r\n          public: true,\r\n        }),\r\n      });\r\n      const jsonResponse = await response.json();\r\n      const playlistId = jsonResponse.id;\r\n      if (playlistId) {\r\n        const replacePlaylistTracksUrl = `https://api.fy.com/v1/playlists/${playlistId}/tracks`;\r\n        await fetch(replacePlaylistTracksUrl, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${accessToken}`,\r\n          },\r\n          body: JSON.stringify({\r\n            uris: trackIds.map((id) => \"fy:track:\".concat(id)),\r\n          }),\r\n        });\r\n      }\r\n    }\r\n  },\r\n};\r\n\r\nexport default fy;\r\n"]},"metadata":{},"sourceType":"module"}